import hashlib
import string

from exercise_2 import CubeCipher, break_cipher, mse


def test_encrypt_decrypt_inverse():
    cube = CubeCipher('KKCVNCQDEPZJCPRHQUFRDQJWKMWHFIJHLACXZNBKDNZZEQHSXOFGUR')
    encrypted = 'WVDYN E AZWAVI PELTKP (HYH JYYAUQA QYTJV VP AWRW ZYVI ZW DKW) HTUHDGWZQN KRS JFYKQQCLUQ EQFXA SR IYH JRMBEHF MPDJH HLSKV KLB: XWVQ, ZKCXEJ AY LTIVLVJ IYLZ SW QZOS, CLT XDCO SCV VOKVE BLJU, ECU ZHSXTU WV CIT NKHD ADLOK REEGHU XIMK.  WOO JXIVA DLXEJ ZRI WVDYN APJ D NORTIDS MLDIXZ YJ IYHYO KDVV ISPA! KKLX XWV UHLFXKV CYMRV DSYRV--TDAML WZP, FYY QP WOO LTUJL! DLTE VPVICTH, HXH IYHU KRDKKLB GDEIBCMDE RM FSXTHZ--RSAU XW RMH YHHN--FGRQKI RDN--GVXX RYRRO LXD--KVG APJ LA, YPS WHSVSL? NKHD LPGSLXIS KR FYY? IVOS EW PCO HLSJK LA!  VEHK FHWI P CLADPT WHLLPT, JTBOEZZQN FSXTH, (AREIJ EPVP, IYRBQLI ROPMI,) LVOS, S LPIGSI OCFZ--UY QDIH, ARECB BL; SQ QVWAOV CFZ--IEX XD D KOEA KRV PPJJWLBIS KR AOPA PRB--KPA Z NUYA XJ, VVWIIYLUQ GDDHZ KX BV OPUI P ADJU-MC-KKL-LSM, RQK ET X XRLC PXBH H CON-IRJUII!  JR FYY SZG, VVH UVOSYA! HRLK DLT FWOOVH.  NH TEWI SXYX XWV KVEWT URDX! WPZG ARI GREISXH MRPMI; PEG HVMRV FHVPTU RBD EH CRBN EH JKL MSJCG, PP CDL GV. SPA JHA NMCRK HD CDL!  WOOVT NDZ K HTRG ZSPTEFL SRHKDUDPN, RQK KPXTH ARSJXKA DS WVUZOPU, Z ZVXHTI ZOKX IYHF GMAC GV XIMK! LM DLTP KHN ECP VLXWT, KKLIH IRNL DLT IRVP SUW. DMDIG R PPXYIV RY DAD, KKLI FTXDU WSKZQN KFDLW HQEXE, DUN EAZFL RIPIG ARI GREISX HRB, H LEGI'

    assert cube.encrypt(cube.decrypt(encrypted)) == encrypted

def test_mse():
    all_zero = dict((c, 0) for c in string.ascii_uppercase)
    all_ones = dict((c, 1) for c in string.ascii_uppercase)
    
    assert mse(all_zero, all_zero) == 0.0
    assert mse(all_ones, all_zero) == 1.0
    assert mse(all_zero, all_ones) == 1.0
    assert mse(all_ones, all_ones) == 0.0

def test_from_key():
    key = "ABCDEF"
    cube = CubeCipher.from_key(key)

    assert cube.get_key() == key

def test_decrypt_fast():
    cube = CubeCipher('KKCVNCQDEPZJCPRHQUFRDQJWKMWHFIJHLACXZNBKDNZZEQHSXOFGUR')
    encrypted = 'WVDYN E AZWAVI PELTKP (HYH JYYAUQA QYTJV VP AWRW ZYVI ZW DKW) HTUHDGWZQN KRS JFYKQQCLUQ EQFXA SR IYH JRMBEHF MPDJH HLSKV KLB: XWVQ, ZKCXEJ AY LTIVLVJ IYLZ SW QZOS, CLT XDCO SCV VOKVE BLJU, ECU ZHSXTU WV CIT NKHD ADLOK REEGHU XIMK.  WOO JXIVA DLXEJ ZRI WVDYN APJ D NORTIDS MLDIXZ YJ IYHYO KDVV ISPA! KKLX XWV UHLFXKV CYMRV DSYRV--TDAML WZP, FYY QP WOO LTUJL! DLTE VPVICTH, HXH IYHU KRDKKLB GDEIBCMDE RM FSXTHZ--RSAU XW RMH YHHN--FGRQKI RDN--GVXX RYRRO LXD--KVG APJ LA, YPS WHSVSL? NKHD LPGSLXIS KR FYY? IVOS EW PCO HLSJK LA!  VEHK FHWI P CLADPT WHLLPT, JTBOEZZQN FSXTH, (AREIJ EPVP, IYRBQLI ROPMI,) LVOS, S LPIGSI OCFZ--UY QDIH, ARECB BL; SQ QVWAOV CFZ--IEX XD D KOEA KRV PPJJWLBIS KR AOPA PRB--KPA Z NUYA XJ, VVWIIYLUQ GDDHZ KX BV OPUI P ADJU-MC-KKL-LSM, RQK ET X XRLC PXBH H CON-IRJUII!  JR FYY SZG, VVH UVOSYA! HRLK DLT FWOOVH.  NH TEWI SXYX XWV KVEWT URDX! WPZG ARI GREISXH MRPMI; PEG HVMRV FHVPTU RBD EH CRBN EH JKL MSJCG, PP CDL GV. SPA JHA NMCRK HD CDL!  WOOVT NDZ K HTRG ZSPTEFL SRHKDUDPN, RQK KPXTH ARSJXKA DS WVUZOPU, Z ZVXHTI ZOKX IYHF GMAC GV XIMK! LM DLTP KHN ECP VLXWT, KKLIH IRNL DLT IRVP SUW. DMDIG R PPXYIV RY DAD, KKLI FTXDU WSKZQN KFDLW HQEXE, DUN EAZFL RIPIG ARI GREISX HRB, H LEGI'

    assert cube.encrypt(cube.decrypt_fast(encrypted)) == encrypted

def test_break_cipher():
    seed1 = 'KKCVNCQDEPZJCPRHQUFRDQJWKMWHFIJHLACXZNBKDNZZEQHSXOFGUR'
    encrypted1 = 'WVDYN E AZWAVI PELTKP (HYH JYYAUQA QYTJV VP AWRW ZYVI ZW DKW) HTUHDGWZQN KRS JFYKQQCLUQ EQFXA SR IYH JRMBEHF MPDJH HLSKV KLB: XWVQ, ZKCXEJ AY LTIVLVJ IYLZ SW QZOS, CLT XDCO SCV VOKVE BLJU, ECU ZHSXTU WV CIT NKHD ADLOK REEGHU XIMK.  WOO JXIVA DLXEJ ZRI WVDYN APJ D NORTIDS MLDIXZ YJ IYHYO KDVV ISPA! KKLX XWV UHLFXKV CYMRV DSYRV--TDAML WZP, FYY QP WOO LTUJL! DLTE VPVICTH, HXH IYHU KRDKKLB GDEIBCMDE RM FSXTHZ--RSAU XW RMH YHHN--FGRQKI RDN--GVXX RYRRO LXD--KVG APJ LA, YPS WHSVSL? NKHD LPGSLXIS KR FYY? IVOS EW PCO HLSJK LA!  VEHK FHWI P CLADPT WHLLPT, JTBOEZZQN FSXTH, (AREIJ EPVP, IYRBQLI ROPMI,) LVOS, S LPIGSI OCFZ--UY QDIH, ARECB BL; SQ QVWAOV CFZ--IEX XD D KOEA KRV PPJJWLBIS KR AOPA PRB--KPA Z NUYA XJ, VVWIIYLUQ GDDHZ KX BV OPUI P ADJU-MC-KKL-LSM, RQK ET X XRLC PXBH H CON-IRJUII!  JR FYY SZG, VVH UVOSYA! HRLK DLT FWOOVH.  NH TEWI SXYX XWV KVEWT URDX! WPZG ARI GREISXH MRPMI; PEG HVMRV FHVPTU RBD EH CRBN EH JKL MSJCG, PP CDL GV. SPA JHA NMCRK HD CDL!  WOOVT NDZ K HTRG ZSPTEFL SRHKDUDPN, RQK KPXTH ARSJXKA DS WVUZOPU, Z ZVXHTI ZOKX IYHF GMAC GV XIMK! LM DLTP KHN ECP VLXWT, KKLIH IRNL DLT IRVP SUW. DMDIG R PPXYIV RY DAD, KKLI FTXDU WSKZQN KFDLW HQEXE, DUN EAZFL RIPIG ARI GREISX HRB, H LEGI'

    assert CubeCipher(seed1).decrypt(encrypted1) == break_cipher(encrypted1).decrypt(encrypted1)

    encrypted2 = 'UHQLF MC WW RGTH BV Y GNFKG. LN, BZE TMND TBZQS, LVX AYHW, OGL QDX KAMRGXF BBQ LTFDMB "OHWLWL" NK BHB; DNK GAM FZW FXIB RXJXZYK GWVM JHMHEM FHLHHZGDL OUWSS VVBTBQXB PPM GTR ZWR ANFGB, YMW STBCM ND UG UHER UMYRMG TVB NMVXZ SMIZXIQZGH MPGMZG, TTJ AXQTCQD MVXG UNNZW VMS KSFMKAXF MPC RBAITC QNZXA RGXWK NPHXBWA FZW HTCEGM HAMK: RNQA IQ, SAOM I PDW-VHB NNDSK EGKE PNZL XHI BN WNN VHTB HM HHW JNGU; TVB SAOM QD XHI VCR XHIK NGMZSK DCQR RXMNKR KBBF Z DBBNC, HM ILCYKEM UTCDWG; TVB RAS AIB MXJXZ DNKUHBRDG HAIR, HY MHC BQBBD USBA TKWK Z UCMBJD FOKSCC ICBAMM, BH BA YKFCLB ADKHTQL SH RBAYFKSX EGSA MHC, QNHBXZ MQ EOMMP.  GHKXDCQ, MVBA ZNMHEM UZL BHB KZKYXL NNBGHV, QN TZBKC UXBMCPDW HH BYRMS BB, YMW TBVBHGU BB TDKM GQAD, (BH AIB, HG TTKR, Z LCKB ME FWQMB EEOOWSQ HT VPCQKM-MIPS, VILBYQW, DBVC-ZIDEM, PNTGM BSQDSR, BMEYSX, ILC ACM JSSMSKMB SHOLB,) QGX JXZW RHCG NGMBGAMB HM CYN.  UGTH T KSQBCNA DDXZBVE! RTWW IJHVS; B USRM PX AFTMHBVE TI ZBSC Z MSEMQBHDX.  ILC LC BB UZL WGLCDW: GAM UZL BHE MMEM MML HGQAMQ GBUA, ILC ASK NYBX PKQEGMSGMB TI OM BFD MVHCEGM HAIR RAS PIQ MHK MPC QBUAB QHSS YWP FHWGO RGKCNOF SAS EQRSES WWMQ BBMW RGTH EWTDEM ZIPCXB. YQPRM, VHECUXF, LPC VTWMMB EHF T NCV FWGCRDL HH ACD BT LPC VTG'
    checksum2 = '406c70ca3c75bb6b12063ae0fb15d635b34a522504192796909b5f44a7c0366b'

    cube2 = break_cipher(encrypted2)
    m2 = cube2.decrypt(encrypted2)
    assert hashlib.sha256(m2.encode()).hexdigest() == checksum2

if __name__ == "__main__":
    test_encrypt_decrypt_inverse()
    test_mse()
    test_from_key()
    test_decrypt_fast()
    test_break_cipher()
