Q3a_N = 99661353765853752857348244367239648679159380236983015287712101473613050602511002787985026091963301744908624641898013954574552446088710882631509520008924879680119139835780144750880753416400505470825703963822265389449124577620487782774552657060478078986135223936200150802274171297545305550355267280004884294091
Q3a_L = [
    10474214859475566754609358797199402456917384846512920023929466473001570586439811682350827764189841160614048678079764308638653224267074090930120797316773607796132491847439798002789400022450418217259697290021893055671041691477871715543362790654866988388997909238895943049653538042643330217770198701207978513374,
    10474214859475566754609358797199402456917384846512920023929466473001570586439811682350827764189841160614048678079764308638653224267074090930120797316773607796132491847439798002789400022450418217259697290021893055671041691477871715543362790654866988388997909238895943049653538042643330217770198701207978508288,
    31393239389357000881343453936082540432493155172412867699476567071796476833250833328712675211530784567844459702904556382133734891430580783510311848433363782621197041014101283630469290475160101285245029446851844515571417875606431194519187547211161465606938872560288530571647643798204388496490363312175671934976,
    69293470335305294837067811611722301698017863060661074392345158097846199155603692611637777949945615364341471957123464128299123123639331374939698719589032408367331631236646952425789739909215998588183871537916033718214457668767773544374774793814423064882472227136709234932123830966737664411479441780671125716992,
    7008940549663388189215905723835388145673306142942896518268403223806406320940483792613440433708222128951518498928566769067554778837532675013421613549549076765357275255249197167285577587207267096007191506010228056447064923799490314261971176063367610387977176526071791454264428240741720134648886762949860655104,
]
Q3a_y = 98361500895009223209760488143636852204499266792242974959505196921993150362062104696109793631155585464325355167522895306729242637712045097896273580123891249945548675543493104151423918437465638780659257155634117328749254914546095674065801433159776300260123312650206457128476041587109518994847492238884474360431
Q3b_N = 1277665955498541577449282482293899723850026905326947303272040119729582659722100316527605575092099589448658657282931818137519946346172008038929506730262232576486868910511130330817084773451065744371250222896832505757602058393841314657279357357698302639298891571938984821276943276569187771387129766249736914221648060988615919115586359061368129299489218425493673929503203149488945643038278042767867446264520817138939019891636179346446912466610380337516972556069810791


def q3a() -> list[int]:
    """
    Given square roots, we can find non-trivial factors (slide 322). We use the stated lemma to find such a factor.
    """

    # don't bother trying to recover the erased bits, take advantage of the parameter generation error and use L[0] directly
    x = Zmod(Q3a_N)(Q3a_L[0])
    x_ord = 2 ^ (len(Q3a_L) - 1)
    assert x ^ x_ord == 1  # sanity check

    # get lemma parameters, assert the assumption
    y0 = x ^ (x_ord / 2)
    y1 = x ^ x_ord
    assert y0 ^ 2 == y1 ^ 2 and y0 != y1 and y0 != -y1

    # non-trivial factor
    p = gcd((y0 - y1).lift(), Q3a_N)
    q = Q3a_N // p

    # could be generic, but it seems like the given params are designed this way
    assert is_prime(p) and is_prime(q) and p * q == Q3a_N

    p_roots = Zmod(p)(Q3a_y).square_root(all=True)
    q_roots = Zmod(q)(Q3a_y).square_root(all=True)

    # CRT
    roots = [crt(pr.lift(), qr.lift(), p, q) for pr in p_roots for qr in q_roots]

    # sanity check that they are indeed square roots
    for r in roots:
        assert Zmod(Q3a_N)(r) ^ 2 == Q3a_y

    return sorted(roots)


if __name__ == "__main__":
    print(f"Question 3.1: {q3a()}")
